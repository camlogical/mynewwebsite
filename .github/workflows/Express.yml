name: CI_RDP+APP

on: workflow_dispatch

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: üì• Download Ngrok
      run: Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip

    - name: üóúÔ∏è Extract Ngrok
      run: Expand-Archive ngrok.zip -DestinationPath ngrok

    - name: üîê Set Ngrok AuthToken
      run: .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}

    - name: üñ•Ô∏è Enable RDP and Firewall
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1

    - name: üîë Set Runner Admin Password
      run: Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "Adminrdp123" -Force)

    - name: üö™ Start Ngrok Tunnel
      run: Start-Process PowerShell -ArgumentList '-NoExit', '-Command', '.\ngrok\ngrok.exe tcp --region=ap 3389'

    - name: ‚è≥ Wait for Tunnel
      run: Start-Sleep -Seconds 10

    - name: üîç Get Ngrok RDP Address
      run: |
        $maxAttempts = 5
        for ($i = 0; $i -lt $maxAttempts; $i++) {
          try {
            $response = Invoke-RestMethod http://127.0.0.1:4040/api/tunnels
            $tcpTunnel = $response.tunnels | Where-Object { $_.proto -eq "tcp" }
            if ($tcpTunnel) {
              Write-Output "‚úÖ RDP Endpoint: $($tcpTunnel.public_url)"
              Write-Output "üë§ Username: runneradmin"
              Write-Output "üîë Password: Adminrdp123"
              exit 0
            }
          } catch {
            Start-Sleep -Seconds 3
          }
        }
        Write-Error "Ngrok tunnel did not start in time."

    - name: üì• Download ExpressVPN installer
      run: Invoke-WebRequest -Uri "https://www.expressvpn.com/clients/windows/expressvpn_windows_12.101.0.45_release.exe" -OutFile "expressvpn_installer.exe"

    - name: üïí Install ExpressVPN with improved handling
      run: |
        $startTime = Get-Date
        $timeout = New-TimeSpan -Minutes 5
        $installerPath = Join-Path $PWD "expressvpn_installer.exe"
        
        # Start installation with detailed logging
        Write-Output "Starting ExpressVPN installation..."
        Write-Output "Installer path: $installerPath"
        
        # Check if installer exists
        if (-not (Test-Path $installerPath)) {
          Write-Error "Installer not found at $installerPath"
          exit 1
        }
        
        # Run installation with elevated privileges
        try {
          $process = Start-Process -FilePath $installerPath -ArgumentList '/quiet', '/norestart' -Wait -PassThru
          Write-Output "Installation process completed with exit code: $($process.ExitCode)"
          
          if ($process.ExitCode -ne 0) {
            Write-Error "Installation failed with exit code: $($process.ExitCode)"
            exit 1
          }
        } catch {
          Write-Error "Failed to start installation: $_"
          exit 1
        }
        
        # Wait for installation to complete and verify
        Write-Output "Waiting for ExpressVPN to initialize..."
        $installed = $false
        
        while ((Get-Date) - $startTime -lt $timeout) {
          # Check for both possible installation paths
          $cliPath = "C:\Program Files (x86)\ExpressVPN\services\ExpressVPN.CLI.exe"
          $altCliPath = "C:\Program Files\ExpressVPN\services\ExpressVPN.CLI.exe"
          
          if (Test-Path $cliPath) {
            try {
              $version = & $cliPath --version
              Write-Output "‚úÖ ExpressVPN installed successfully at $cliPath"
              Write-Output "Version: $version"
              $installed = $true
              break
            } catch {
              Write-Output "CLI found but not responding yet..."
            }
          } elseif (Test-Path $altCliPath) {
            try {
              $version = & $altCliPath --version
              Write-Output "‚úÖ ExpressVPN installed successfully at $altCliPath"
              Write-Output "Version: $version"
              $installed = $true
              break
            } catch {
              Write-Output "CLI found but not responding yet..."
            }
          } else {
            Write-Output "Waiting for ExpressVPN installation to complete..."
          }
          
          Start-Sleep -Seconds 10
        }
        
        if (-not $installed) {
          Write-Error "ExpressVPN installation verification failed after $($timeout.TotalMinutes) minutes"
          Write-Output "Checking for installation logs..."
          
          # Check Windows Event Log for installation issues
          $events = Get-WinEvent -FilterHashtable @{
            LogName = 'Application'
            StartTime = $startTime
          } -ErrorAction SilentlyContinue | Where-Object { $_.Message -like '*ExpressVPN*' }
          
          if ($events) {
            Write-Output "Found relevant events:"
            $events | ForEach-Object {
              Write-Output "Time: $($_.TimeCreated) - Message: $($_.Message)"
            }
          }
          
          exit 1
        }
        
        Write-Output "ExpressVPN installation completed successfully"

    - name: üîê Activate ExpressVPN with retry mechanism
      run: |
        $maxRetries = 3
        $retryCount = 0
        $activated = $false
        
        # Change to ExpressVPN services directory
        Set-Location "C:\Program Files (x86)\ExpressVPN\services"
        
        while (-not $activated -and $retryCount -lt $maxRetries) {
          try {
            Write-Output "Attempting to activate ExpressVPN (Attempt $($retryCount + 1))"
            & ".\ExpressVPN.CLI.exe" activate $Env:EXPRESSVPN_ACTIVATION_CODE
            Start-Sleep -Seconds 10
            
            # Verify activation
            $status = & ".\ExpressVPN.CLI.exe" status
            if ($status -match "Activated") {
              Write-Output "‚úÖ ExpressVPN activated successfully"
              $activated = $true
            } else {
              throw "Activation verification failed"
            }
          } catch {
            Write-Output "Activation attempt failed: $_"
            $retryCount++
            if ($retryCount -lt $maxRetries) {
              Write-Output "Retrying in 10 seconds..."
              Start-Sleep -Seconds 10
            }
          }
        }
        
        if (-not $activated) {
          Write-Error "Failed to activate ExpressVPN after $maxRetries attempts"
          exit 1
        }
      env:
        EXPRESSVPN_ACTIVATION_CODE: ${{ secrets.EXPRESSVPN_ACTIVATION_CODE }}

    - name: üåç Connect to Cambodia server with verification
      run: |
        $maxRetries = 3
        $retryCount = 0
        $connected = $false
        
        # Change to ExpressVPN services directory
        Set-Location "C:\Program Files (x86)\ExpressVPN\services"
        
        while (-not $connected -and $retryCount -lt $maxRetries) {
          try {
            Write-Output "Attempting to connect to Cambodia server (Attempt $($retryCount + 1))"
            & ".\ExpressVPN.CLI.exe" connect "Cambodia"
            Start-Sleep -Seconds 15
            
            # Verify connection
            $status = & ".\ExpressVPN.CLI.exe" status
            if ($status -match "Connected") {
              Write-Output "‚úÖ Successfully connected to Cambodia server"
              $connected = $true
            } else {
              throw "Connection verification failed"
            }
          } catch {
            Write-Output "Connection attempt failed: $_"
            $retryCount++
            if ($retryCount -lt $maxRetries) {
              Write-Output "Retrying in 10 seconds..."
              Start-Sleep -Seconds 10
            }
          }
        }
        
        if (-not $connected) {
          Write-Error "Failed to connect to Cambodia server after $maxRetries attempts"
          exit 1
        }

    - name: üîç Verify VPN Connection
      run: |
        # Change to ExpressVPN services directory
        Set-Location "C:\Program Files (x86)\ExpressVPN\services"
        
        $status = & ".\ExpressVPN.CLI.exe" status
        Write-Output "Current VPN Status: $status"
        
        # Additional verification
        $ipInfo = Invoke-RestMethod -Uri "https://api.ipify.org?format=json"
        Write-Output "Current IP: $($ipInfo.ip)"

    - name: üîΩ Download Your App
      run: Invoke-WebRequest -Uri "https://secuhex.com/app1.zip" -OutFile app1.zip

    - name: üóúÔ∏è Extract App
      run: Expand-Archive app1.zip -DestinationPath app1

    - name: üöÄ Run telegram_land_checker.exe
      run: |
        Start-Process -FilePath "telegram_land_checker.exe" -WorkingDirectory "${{ github.workspace }}\app"

    - name: üïí Keep Runner Alive
      run: |
        for ($i = 0; $i -lt 358; $i++) {
          Write-Output "üèÉ Staying alive... $i minutes"
          Start-Sleep -Seconds 60
        }

    - name: üîÅ Auto-Restart Workflow
      if: always()
      env:
        GH_PAT: ${{ secrets.GH_PAT }}
      run: |
        if ("${{ job.status }}" -eq "cancelled") {
          Write-Output "üö´ Workflow was cancelled manually. Not restarting."
          exit 0
        }

        $headers = @{ Authorization = "Bearer $Env:GH_PAT" }
        $body = @{ ref = "${{ github.ref }}" } | ConvertTo-Json
        Invoke-RestMethod `
          -Uri "https://api.github.com/repos/${{ github.repository }}/actions/workflows/main.yml/dispatches" `
          -Method POST -Headers $headers -Body $body -ContentType "application/json"
        Write-Output "üîÅ Re-triggered workflow run."
