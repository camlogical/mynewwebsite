name: CI_RDP+APP+Express

on: workflow_dispatch

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: 📥 Download Ngrok
      run: Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip

    - name: 🗜️ Extract Ngrok
      run: Expand-Archive ngrok.zip -DestinationPath ngrok

    - name: 🔐 Set Ngrok AuthToken
      run: .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}

    - name: 🖥️ Enable RDP and Firewall
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1

    - name: 🔑 Set Runner Admin Password
      run: Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "Adminrdp123" -Force)

    - name: 🚪 Start Ngrok Tunnel
      run: Start-Process PowerShell -ArgumentList '-NoExit', '-Command', '.\ngrok\ngrok.exe tcp --region=ap 3389'

    - name: ⏳ Wait for Tunnel
      run: Start-Sleep -Seconds 10

    - name: 🔍 Get Ngrok RDP Address
      run: |
        $maxAttempts = 5
        for ($i = 0; $i -lt $maxAttempts; $i++) {
          try {
            $response = Invoke-RestMethod http://127.0.0.1:4040/api/tunnels
            $tcpTunnel = $response.tunnels | Where-Object { $_.proto -eq "tcp" }
            if ($tcpTunnel) {
              Write-Output "✅ RDP Endpoint: $($tcpTunnel.public_url)"
              Write-Output "👤 Username: runneradmin"
              Write-Output "🔑 Password: Adminrdp123"
              exit 0
            }
          } catch {
            Start-Sleep -Seconds 3
          }
        }
        Write-Error "Ngrok tunnel did not start in time."

    - name: 🧰 Install ExpressVPN (specific version)
      run: |
        Invoke-WebRequest -Uri "https://www.expressvpn.com/clients/windows/expressvpn_windows_12.101.0.45_release.exe" -OutFile "expressvpn_installer.exe"
        Start-Process -FilePath "expressvpn_installer.exe" -ArgumentList '/quiet', '/norestart' -Wait

    - name: 🔐 Activate ExpressVPN
      run: |
        & "$Env:ProgramFiles\ExpressVPN\expressvpn.exe" activate $Env:EXPRESSVPN_KEY
      env:
        EXPRESSVPN_KEY: ${{ secrets.EXPRESSVPN_KEY }}

    - name: 🌐 Connect to Cambodia VPN
      run: |
        & "$Env:ProgramFiles\ExpressVPN\expressvpn.exe" connect Cambodia

    - name: 🔄 Watchdog - Ensure ExpressVPN stays connected
      run: |
        $maxChecks = 5
        for ($i = 0; $i -lt $maxChecks; $i++) {
          $status = & "$Env:ProgramFiles\ExpressVPN\expressvpn.exe" status
          if ($status -match "Connected") {
            Write-Output "✅ ExpressVPN is connected."
            break
          } else {
            Write-Output "⚠️ ExpressVPN not connected. Attempting to reconnect..."
            & "$Env:ProgramFiles\ExpressVPN\expressvpn.exe" reconnect
            Start-Sleep -Seconds 10
          }
          if ($i -eq ($maxChecks - 1)) {
            Write-Output "❌ Failed to maintain ExpressVPN connection after multiple attempts."
            exit 1
          }
        }

    - name: 🌍 Verify IP Location (should be Cambodia)
      run: |
        Start-Sleep -Seconds 20
        Invoke-RestMethod https://ipinfo.io/json

    - name: 🔽 Download Your App
      run: Invoke-WebRequest -Uri "https://secuhex.com/app.zip" -OutFile app.zip

    - name: 🗜️ Extract App
      run: Expand-Archive app.zip -DestinationPath app

    - name: 🚀 Run telegram_land_checker.exe
      run: |
        Start-Process -FilePath "telegram_land_checker.exe" -WorkingDirectory "${{ github.workspace }}\app"

    - name: 🕒 Keep Runner Alive
      run: |
        for ($i = 0; $i -lt 358; $i++) {
          Write-Output "🏃 Staying alive... $i minutes"
          Start-Sleep -Seconds 60
        }

    - name: 🔁 Auto-Restart Workflow
      if: always()
      env:
        GH_PAT: ${{ secrets.GH_PAT }}
      run: |
        if ("${{ job.status }}" -eq "cancelled") {
          Write-Output "🚫 Workflow was cancelled manually. Not restarting."
          exit 0
        }

        $headers = @{ Authorization = "Bearer $Env:GH_PAT" }
        $body = @{ ref = "${{ github.ref }}" } | ConvertTo-Json
        Invoke-RestMethod `
          -Uri "https://api.github.com/repos/${{ github.repository }}/actions/workflows/main.yml/dispatches" `
          -Method POST -Headers $headers -Body $body -ContentType "application/json"
        Write-Output "🔁 Re-triggered workflow run."
