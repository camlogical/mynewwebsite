name: CI

on: workflow_dispatch

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Download Ngrok ZIP
      run: Invoke-WebRequest https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-windows-amd64.zip -OutFile ngrok.zip

    - name: Extract Ngrok
      run: Expand-Archive ngrok.zip -DestinationPath .

    - name: Authenticate Ngrok
      run: .\ngrok.exe authtoken "$Env:NGROK_AUTH_TOKEN"
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}

    - name: Enable Remote Desktop
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1

    - name: Set Runner Admin Password
      run: Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "Techguy20" -Force)

    - name: Start Ngrok Tunnel (RDP)
      run: Start-Job { .\ngrok.exe tcp --region=ap 3389 }

    - name: Wait for Ngrok to Initialize
      run: Start-Sleep -Seconds 10  # Wait for Ngrok to fully initialize before accessing its API.

    - name: Get Public Ngrok URL
      run: |
        $url = Invoke-RestMethod -Uri http://127.0.0.1:4040/api/tunnels
        if ($url.tunnels.Count -gt 0) {
          Write-Output "Ngrok public URL: $($url.tunnels[0].public_url)"
        } else {
          Write-Error "No Ngrok tunnel found"
        }
      continue-on-error: true

    - name: Download RDP Helper Script
      run: Invoke-WebRequest https://raw.githubusercontent.com/chendagithub/mynewwebsite/main/check.bat -OutFile check.bat

    - name: Show Login IP (Optional Helper Script)
      run: cmd /c check.bat

    - name: Download Timeout Script
      run: Invoke-WebRequest https://raw.githubusercontent.com/fluzzz/timeout.ps1/main/timeout.ps1 -OutFile timeout.ps1

    - name: Keep Runner Alive
      run: ./timeout.ps1
