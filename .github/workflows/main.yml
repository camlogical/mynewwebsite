name: CI

on: workflow_dispatch

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Download Ngrok (v3)
      run: Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip

    - name: Extract Ngrok
      run: Expand-Archive ngrok.zip -DestinationPath .

    - name: Add Ngrok Authtoken
      run: .\ngrok.exe config add-authtoken "$Env:NGROK_AUTH_TOKEN"
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}

    - name: Create Ngrok Config File
      run: |
        $config = @"
        version: 2
        tunnels:
          rdp:
            proto: tcp
            addr: 3389
            region: ap
        "@
        $config | Out-File ngrok.yml -Encoding ASCII

    - name: Enable RDP and Firewall
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1

    - name: Set Runner Password
      run: Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "Techguy20" -Force)

    - name: Start Ngrok Tunnel
      run: Start-Process -NoNewWindow -FilePath ".\ngrok.exe" -ArgumentList "start --config=ngrok.yml rdp"

    - name: Wait for Ngrok to Initialize
      run: Start-Sleep -Seconds 10

    - name: Fetch Ngrok Public Endpoint
      run: |
        $tunnels = Invoke-RestMethod http://127.0.0.1:4040/api/tunnels
        foreach ($tunnel in $tunnels.tunnels) {
          if ($tunnel.name -eq "rdp") {
            Write-Output "ðŸ”— RDP Endpoint: $($tunnel.public_url)"
          }
        }

    - name: Keep Runner Alive
      run: Start-Sleep -Seconds 3600
